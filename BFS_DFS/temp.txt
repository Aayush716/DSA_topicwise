class Solution {
public:
    int isvalid(int i,int j,int n,int m){
        if((i>=0 && i<=n-1) && (j>=0 && j<=m-1)){
            return 1;
        }
        return 0;
    }

    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> flip;
        vector<vector<int>> visited;
        vector<int> temp(m,0);
        for(int i=0;i<n;i++){
            flip.push_back(temp,0);
            visited.push_back(temp,0);
        }

        queue<pair<int,int>> q;//q has pairs of cordinates that we will never flip
        
        //q has all pairs that are at border and have 'O'
    
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || i==n-1 || j==0 || j==m-1){
                    //flip[i][j]=-1;
                    q.push({i,j});
                    visited[i][j]=1;
                }
            }
        }

        //Using BFS we are trying to find all 'O' that are directly reachable and hence we will never flip them also
        while(!q.empty()){
            pair<int,int> temp = q.front();
            int i = temp.first;
            int j = temp.second;
            if(isvalid(i-1,j,n,m) && board[i-1][j]=='O' && !visited[i-1][j]){
                q.push({i-1,j});
                visited[i-1][j]=1;
            }
            if(isvalid(i+1,j,n,m) && board[i+1][j]=='O' && !visited[i+1][j]){
                q.push({i+1,j});
                visited[i+1][j]=1;
            }
            if(isvalid(i,j-1,n,m) && board[i][j-1]=='O' && !visited[i][j-1]){
                q.push({i,j-1});
                visited[i][j-1]=1;
            }
             if(isvalid(i,j+1,n,m) && board[i][j+1]=='O' && !visited[i][j+1]){
                q.push({i,j+1});
                visited[i][j+1]=1;
            }
            flip[i][j] = -1;//at this coordinate we will never flip
            q.pop();
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O' && flip[i][j]==0){
                    board[i][j] = 'X';
                }
            }
        }
    }
};